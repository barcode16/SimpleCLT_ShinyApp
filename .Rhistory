col.border["white" == col] <- "black"
plot(my.binomial, border = col.border, col = col, main =
paste("Histogram of Binomial (n = ", n, ", p = ", prob, ")", sep = ""),
xlab = "k", ylab = "P[X = k]")
return(my.binomial)
} # end function binomial.histogram
# Example of calling "binomial.histogram" function.
n <- 6
prob <- 0.5
my.colors <- c("paleturquoise", "sky blue")
my.binomial <- binomial.histogram(n, p, my.colors)
# Example of calling "binomial.histogram" function.
n <- 100
prob <- 0.5
my.colors <- c("paleturquoise", "sky blue")
my.binomial <- binomial.histogram(n, p, my.colors)
# Example of calling "binomial.histogram" function.
n <- 10000
prob <- 0.5
my.colors <- c("paleturquoise", "sky blue")
my.binomial <- binomial.histogram(n, p, my.colors)
# Example of calling "binomial.histogram" function.
n <- 800
prob <- 0.5
my.colors <- c("paleturquoise", "sky blue")
my.binomial <- binomial.histogram(n, p, my.colors)
setwd("C:/Users/Michael/Desktop/R Working Directory/SimpleCLT")
runApp()
library(shiny)
runApp()
runApp()
runApp()
library(ggplot2)
library(Hmisc)
library(mosaic)
library(dplyr)
set.seed(4444)
dist <- rbinom(400, 200, prob = 0.5)
dist <- data.frame(dist)
dist$dist <- dist$dist/200*100
dist <- arrange(dist, dist)
dist95 <- dist[11:390, ]
mind <- min(dist95)
maxd <- max(dist95)
m <- mean(dist$dist)
m
mind
maxd
ggplot(dist, aes(x = dist)) +
geom_dotplot(method = "histodot", binwidth = 0.5, dotsize = 0.7)+
scale_y_continuous(breaks=NULL)+
theme(axis.title.y=element_blank())
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
set.seed(4444)
dist <- rbinom(k, n, prob = p)
dist <- data.frame(dist)
dist$dist <- dist$dist/n*100
n = input$n
p = input$p/100
k = 400
runApp()
?rbinom
?rbinom
runApp()
runApp()
runApp()
runApp()
k
runApp()
runApp()
runApp()
runApp()
max(dist$dist)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
#devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='barcode16', token='26E49A347A238D090BAA5AC0DC4FBB6E', secret='syAfXALYeVUuY8dn/c4exmmHk00zDsbUxmvyGvgP')
library(shinyapps)
shinyapps::deployApp("C:/Users/Michael/Desktop/R Working Directory/SimpleCLT")
runApp()
getwd()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp(0)
library(shiny)
runApp(0)
runApp()
runApp()
#devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='barcode16', token='26E49A347A238D090BAA5AC0DC4FBB6E', secret='syAfXALYeVUuY8dn/c4exmmHk00zDsbUxmvyGvgP')
library(shinyapps)
shinyapps::deployApp("C:/Users/Michael/Desktop/R Working Directory/SimpleCLT")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
#devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='barcode16', token='26E49A347A238D090BAA5AC0DC4FBB6E', secret='syAfXALYeVUuY8dn/c4exmmHk00zDsbUxmvyGvgP')
library(shinyapps)
shinyapps::deployApp("C:/Users/Michael/Desktop/R Working Directory/SimpleCLT")
g1<- ggplot(dist, aes(x = dist))+
geom_histogram(fill = highlight)
print(g1)
set.seed(4444)
dist <- rbinom(k, n, prob = p)
dist <- data.frame(dist)
dist$dist <- dist$dist/n*100
dist <- arrange(dist, dist)
dist95 <- dist[11:390, ]
dist_out <- (filter(dist, !(dist %in% dist95)))
dist_out <- unlist(dist_out$dist)
dist$highlight <- ifelse(dist$dist %in% dist_out, "highlight", "normal")
mycolours <- c("highlight" = "red", "normal" = "grey50")
mind <- min(dist95)
maxd <- max(dist95)
m <- mean(dist$dist)
#   g1<- ggplot(dist, aes(x = dist)) +
#      geom_dotplot(method = "histodot", binwidth = 0.5, dotsize = 5/(sqrt(n)-2), fill = "Black")# +
#      scale_y_continuous(breaks=NULL)+
#      theme(axis.title.y=element_blank())
#    print(g1)
g1<- ggplot(dist, aes(x = dist))+
geom_histogram(fill = highlight)
print(g1)
summarty(dist)
summary(dist)
g1<- ggplot(dist, aes(x = dist))+
geom_histogram(fill = dist$highlight)
print(g1)
g1<- ggplot(dist, aes(x = dist))+
geom_histogram(stat = "idrntity", fill = dist$highlight)
print(g1)
g1<- ggplot(dist, aes(x = dist))+
geom_histogram(stat = "identity", fill = dist$highlight)
print(g1)
g1<- ggplot(dist, aes(x = dist))+
geom_histogram(stat = "identity", fill = highlight)
print(g1)
qplot(dist,data=dist,geom="histogram",fill=highlight)
set.seed(4444)
dist <- rbinom(k, n, prob = p)
dist <- data.frame(dist)
dist$dist <- dist$dist/n*100
dist <- arrange(dist, dist)
dist95 <- dist[11:390, ]
dist_out <- (filter(dist, !(dist %in% dist95)))
dist_out <- unlist(dist_out$dist)
dist$highlight <- ifelse(dist$dist %in% dist_out, "highlight", "normal")
mycolours <- c("highlight" = "red", "normal" = "grey50")
mind <- min(dist95)
maxd <- max(dist95)
m <- mean(dist$dist)
#   g1<- ggplot(dist, aes(x = dist)) +
#      geom_dotplot(method = "histodot", binwidth = 0.5, dotsize = 5/(sqrt(n)-2), fill = "Black")# +
#      scale_y_continuous(breaks=NULL)+
#      theme(axis.title.y=element_blank())
#    print(g1)
g1<- ggplot(dist, aes(x = dist), fill = highlight)
print(g1)
qplot(dist,data=dist,geom="histogram",fill=highlight)
summary(dist)
n = 100
p =0.5
k = 400
set.seed(4444)
dist <- rbinom(k, n, prob = p)
dist <- data.frame(dist)
dist$dist <- dist$dist/n*100
dist <- arrange(dist, dist)
dist95 <- dist[11:390, ]
dist_out <- (filter(dist, !(dist %in% dist95)))
dist_out <- unlist(dist_out$dist)
dist$highlight <- ifelse(dist$dist %in% dist_out, "highlight", "normal")
mycolours <- c("highlight" = "red", "normal" = "grey50")
mind <- min(dist95)
maxd <- max(dist95)
m <- mean(dist$dist)
#   g1<- ggplot(dist, aes(x = dist)) +
#      geom_dotplot(method = "histodot", binwidth = 0.5, dotsize = 5/(sqrt(n)-2), fill = "Black")# +
#      scale_y_continuous(breaks=NULL)+
#      theme(axis.title.y=element_blank())
#    print(g1)
g1<- ggplot(dist, aes(x = dist), fill = highlight)
print(g1)
qplot(dist,data=dist,geom="histogram",fill=highlight)
n <- 200
qplot(dist,data=dist,geom="histogram",fill=highlight)
qplot(dist,data=dist,geom="histogram",fill=highlight)
n <- 200
p <- 0.5
k = 400
#  pop = parent()
#  ndist = colMeans(samples())
#  m_samp =  round(mean(ndist),2)
#  sd_samp = round(sd(ndist),2)
#  ndens=density(ndist)
#  nhist=hist(ndist, plot=FALSE)
set.seed(4444)
dist <- rbinom(k, n, prob = p)
dist <- data.frame(dist)
dist$dist <- dist$dist/n*100
dist <- arrange(dist, dist)
dist95 <- dist[11:390, ]
dist_out <- (filter(dist, !(dist %in% dist95)))
dist_out <- unlist(dist_out$dist)
dist$highlight <- ifelse(dist$dist %in% dist_out, "highlight", "normal")
mycolours <- c("highlight" = "red", "normal" = "grey50")
mind <- min(dist95)
maxd <- max(dist95)
m <- mean(dist$dist)
#   g1<- ggplot(dist, aes(x = dist)) +
#      geom_dotplot(method = "histodot", binwidth = 0.5, dotsize = 5/(sqrt(n)-2), fill = "Black")# +
#      scale_y_continuous(breaks=NULL)+
#      theme(axis.title.y=element_blank())
#    print(g1)
g1<- ggplot(dist, aes(x = dist), fill = highlight)
print(g1)
qplot(dist,data=dist,geom="histogram",fill=highlight)
qplot(dist,data=dist,geom="histogram",fill=highlight, binwidth = 2)
qplot(dist,data=dist,geom="histogram",fill=highlight, binwidth = 1)
?geom_histogram
ggplot(dist, aes(x = dist)) +
geom_histogram()
g1<- ggplot(dist, aes(x = dist)) +
geom_histogram(binwidth = 1)
print(g1)
g1<- ggplot(dist, aes(x = dist)) +
geom_histogram(binwidth = 1, fill=highlight)
print(g1)
head(dist)
g1<- ggplot(dist, aes(x = dist)) +
geom_histogram(binwidth = 1, fill=highlight, data = dist)
print(g1)
g1<- ggplot(dist, aes(x = dist), fill = highlight) +
geom_histogram(binwidth = 1)
print(g1)
g1<- ggplot(dist, aes(x = dist), fill = highlight) +
geom_histogram(binwidth = 1)
print(g1)
g1<- ggplot(dist, aes(x = dist), fill = highlight) +
geom_histogram(binwidth = 1)
print(g1)
g1<- ggplot(dist, aes(x = dist), colour = highlight) +
geom_histogram(binwidth = 1)
print(g1)
g1<- ggplot(dist, aes(x = dist)) +
geom_histogram(binwidth = 1, colour = highlight)
print(g1)
g1<- ggplot(dist, aes(x = dist), fill=highlight) +
geom_histogram(binwidth = 1, colour = c("red", "green"))
print(g1)
mycolours <- c("highlight" = "red", "normal" = "grey50")
g1<- ggplot(dist, aes(x = dist), fill=highlight) +
geom_histogram(binwidth = 1, colour = mycolours)
print(g1)
g1<- ggplot(dist, aes(x = dist), fill=highlight) +
geom_histogram(binwidth = 1, fill  = mycolours)
print(g1)
qplot(dist,data=dist,geom="histogram",fill=highlight, binwidth = 1)
g1<- ggplot(dist, aes(x = dist), fill=highlight) +
geom_histogram(binwidth = 1, aes(fill=highlight))
print(g1)
g1<- ggplot(dist, aes(x = dist), fill=highlight) +
geom_histogram(binwidth = 1, aes(fill=highlight))
print(g1)
k = 400
#  pop = parent()
#  ndist = colMeans(samples())
#  m_samp =  round(mean(ndist),2)
#  sd_samp = round(sd(ndist),2)
#  ndens=density(ndist)
#  nhist=hist(ndist, plot=FALSE)
set.seed(4444)
dist <- rbinom(k, n, prob = p)
dist <- data.frame(dist)
dist$dist <- dist$dist/n*100
dist <- arrange(dist, dist)
dist95 <- dist[11:390, ]
dist_out <- (filter(dist, !(dist %in% dist95)))
dist_out <- unlist(dist_out$dist)
dist$highlight <- ifelse(dist$dist %in% dist_out, "highlight", "normal")
mycolours <- c("highlight" = "red", "normal" = "grey50")
mind <- min(dist95)
maxd <- max(dist95)
m <- mean(dist$dist)
#   g1<- ggplot(dist, aes(x = dist)) +
#      geom_dotplot(method = "histodot", binwidth = 0.5, dotsize = 5/(sqrt(n)-2), fill = "Black")# +
#      scale_y_continuous(breaks=NULL)+
#      theme(axis.title.y=element_blank())
#    print(g1)
g1<- ggplot(dist, aes(x = dist)) +
geom_histogram(binwidth = 1, aes(fill=highlight))
print(g1)
runApp()
?hist
g1 <- hist(dist$dist)
?floor
mindist <- floor(min(dist$dist))
maxdist <- floor(max(dist$dist))
maxdist
g1 <- hist(dist$dist, breaks = mindist - maxdist)
g1 <- hist(dist$dist, breaks = (maxdist-mindist)
g1 <- hist(dist$dist, breaks = (maxdist-mindist))
print(g1)
g1 <- hist(dist$dist, breaks = (maxdist-mindist),
xlim(c((mindist-2), (maxdist+2))))
print(g1)
?hist
g1 <- hist(dist$dist, breaks = (maxdist-mindist),
xlim(range(breaks)
print(g1)
g1 <- hist(dist$dist, breaks = (maxdist-mindist),
xlim(range(breaks)))
print(g1)
g1 <- hist(dist$dist, breaks = (maxdist-mindist), xlim(range(breaks)))
g1 <- hist(dist$dist, breaks = (maxdist-mindist), xlim(c(mindist, maxdist)))
g1 <- hist(dist$dist, breaks = (maxdist-mindist), xlim(c(mindist-1:maxdist+1)))
print(g1)
g1 <- hist(dist$dist, breaks = (maxdist-mindist), xlim(c(mindist-1,maxdist+1)))
mindist-1
hist(dist$dist, breaks = (maxdist-mindist), xlim(c(mindist-5,maxdist+5)))
g1 <- hist(dist$dist, breaks = (maxdist-mindist))
print(g1)
g1< hist(dist$dist, breaks = (maxdist-mindist))
g1
g1< hist(dist$dist, breaks = (maxdist-mindist))
maxdist
mindist
maxdist-mindist
set.seed(4444)
dist <- rbinom(k, n, prob = p)
dist <- data.frame(dist)
dist$dist <- dist$dist/n*100
dist <- arrange(dist, dist)
dist95 <- dist[((k*0.1)+1):(k*0.9), ]
dist_out <- (filter(dist, !(dist %in% dist95)))
dist_out <- unlist(dist_out$dist)
mindist <- floor(min(dist$dist))
maxdist <- floor(max(dist$dist))
dist$highlight <- ifelse(dist$dist %in% dist_out, "highlight", "normal")
mycolours <- c("highlight" = "red", "normal" = "grey50")
mind <- min(dist95)
maxd <- max(dist95)
m <- mean(dist$dist)
#   g1<- ggplot(dist, aes(x = dist)) +
#      geom_dotplot(method = "histodot", binwidth = 0.5, dotsize = 5/(sqrt(n)-2), fill = "Black")# +
#      scale_y_continuous(breaks=NULL)+
#      theme(axis.title.y=element_blank())
#    print(g1)
# g1<- ggplot(dist, aes(x = dist)) +
#   geom_histogram(binwidth = 1, aes(fill=highlight))
# print(g1)
g1< hist(dist$dist, breaks = (maxdist-mindist))
g1
hist(dist$dist, breaks = 19)
hist(dist$dist, breaks = 19)
hist(dist$dist, breaks = 19)
g1< hist(dist$dist, breaks=(maxdist-mindist))
?breaks
?hist
g1< hist(dist$dist, breaks=mybreaks)
g1
mybreaks <- maxdist-mindist
g1< hist(dist$dist, breaks=mybreaks)
g1
mybreaks <- int(maxdist-mindist)
mybreaks <- as.integer(maxdist-mindist)
hist(dist$dist, breaks=mybreaks)
hist(dist$dist, breaks=mybreaks)
myxlim <- c(mindist-1, maxdist+1)
hist(dist$dist, breaks=mybreaks, xlim = myxlim)
hist(dist$dist, breaks=mybreaks, xlim = myxlim, fill = highlight)
hist(dist$dist, breaks=mybreaks, xlim = myxlim, fill = mycolours)
hist(dist$dist, breaks=mybreaks, xlim = myxlim, col = mycolours)
hist(dist$dist, breaks=mybreaks, xlim = myxlim, col = mycolours)
box()
g1<- ggplot(dist, aes(x = dist)) +   geom_histogram(binwidth = 1, aes(fill=highlight))
print(g1)
runApp()
g1<- ggplot(dist, aes(x = dist)) +
geom_histogram(binwidth = 1, aes(fill=highlight)) +
theme_bw()
print(g1)
runApp()
runApp()
runApp()
install.packages("ggthemes")
?ggthemese
?ggthemes
?theme_few
library(ggthemes)
g1<- ggplot(dist, aes(x = dist)) +
theme_tufte()
print(g1)
g1<- ggplot(dist, aes(x = dist)) +
geom_histogram(binwidth = 1, aes(fill=highlight)) +
theme_tufte()
print(g1)
g1<- ggplot(dist, aes(x = dist)) +
geom_histogram(binwidth = 1, aes(fill=highlight)) +
theme_few()
print(g1)
runApp()
runApp()
g1<- ggplot(dist, aes(x = dist)) +
geom_histogram(binwidth = 1, aes(fill=highlight)) +
theme_few()
print(g1)
g1<- ggplot(dist, aes(x = dist)) +
geom_histogram(binwidth = 1, aes(fill=highlight)) +
theme_bw()
print(g1)
runApp()
runApp()
g1<- ggplot(dist, aes(x = dist)) +
geom_histogram(binwidth = 1, aes(fill=highlight)) +
xlab(0, 100)+
theme_bw()
print(g1)
g1<- ggplot(dist, aes(x = dist)) +
geom_histogram(binwidth = 1, aes(fill=highlight)) +
xlim(0, 100)+
theme_bw()
print(g1)
runApp()
g1<- ggplot(dist, aes(x = dist)) +
geom_histogram(binwidth = 1, aes(fill=highlight)) +
theme_bw()
print(g1)
hist(dbinom(0:100, n, prob))
n
hist(dbinom(0:100, 100, prob))
prob
?dbinom
hist(dbinom(0:100, 1000, prob))
hist(dbinom(100, 100, prob))
hist(dbinom(1:100, 100, prob))
runApp()
runApp()
runApp()
bin.min <- 0
bin.max <- n
bin.range <- bin.min : bin.max
my.binomial <- NULL
my.binomial$breaks <- (bin.min - 0.5) : (bin.max + 0.5)
my.binomial$counts <- dbinom(bin.range, bin.max, prob)
summary(my.binomial)
attr(my.binomial, "class") <- "histogram"
summary(my.binomial)
my.binomial
summary(mybinomial)
summary(my.binomial)
summary(my.binomial$breaks)
runApp()
runApp()
runApp()
runApp()
k*0.1)+1
(k*0.1)+1):(k*0.9)
((k*0.1)+1):(k*0.9)
((k*0.1)+1)
(k*0.9)
(k*0.95)
((k*0.05)+1)
((k*0.025)+1)
runApp()
myxlim
runApp()
mybreaks <- as.integer(maxdist-mindist)
myxlim <- c(mindist-1, maxdist+1)
mybreaks
?geom_histogram
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
